package logicElements.planner;

import java.util.HashMap;

import org.json.JSONObject;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonObject;


import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.IPlannerLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeRecord;
import de.mannheim.wifo2.fesas.tools.parser.jsonParser.JSONParser;
import logicElements.knowledge.Synchronizer;

/**
 * Description from meta data: 
 * 
 * This file has been generated by the FESAS development tool set.
 * 
 * @author FESAS 
 *
 */
public class Planner extends AbstractLogic implements IPlannerLogic {	
	
	public Planner() {
		super();	
		supportedInformationTypes.add(InformationType.Analyzing_DEFAULT);
	
		this.informationType = InformationType.Planning_DEFAULT;
		type = LogicType.PLANNER;
		shortName = "Planner";
	}

	// do not change anything above this line (except of adding import statements)

	//add variables here
	
	@Override
	public void initializeLogic(HashMap<String, String> properties) {
		//use this method for initializing variables, etc.
		// if there is nothing to do, delete it
	}
	
	@Override
	public String callLogic(IKnowledgeRecord data) {
		if (data instanceof KnowledgeRecord) { //substitute Object with the expected data type
			if (data.getData() instanceof String) { //substitute String with the expected data type if needed
				
				String resultFromAnalyzerString = (String) data.getData(); //return the actual data. The other properties of data is metadata (e.g., time stamps).
				System.out.print("Planner received: " + resultFromAnalyzerString);
				
				
				JsonElement element = new JsonParser().parse(resultFromAnalyzerString);
				JsonObject analyzerResultObject = element.getAsJsonObject();
				
				System.out.println("\nPlay Area: " + analyzerResultObject.get("personInPlayArea"));
				System.out.println("Outside Area: " + analyzerResultObject.get("personInOutsideArea"));
				System.out.println("Dining Area: " + analyzerResultObject.get("personInDiningArea"));
				System.out.println("Cloakroom: " + analyzerResultObject.get("personInCloakroom"));
				System.out.println("Time: " + analyzerResultObject.get("time"));
				
				
				
				JsonObject plannerResult = new JsonObject();
				int hourOfTheDay = 0;
				
				
				// plan for Outside_Area
				JsonObject outsideArea = new JsonObject();
				JsonArray sprinklerValue;
				JsonArray sirenValue;
				
				if(analyzerResultObject.get("personInOutsideArea").getAsBoolean()) {
					sprinklerValue = new JsonArray();
					sirenValue = new JsonArray();
					sprinklerValue.add("OFF");
					sirenValue.add("ON");
					
				} else {
					sprinklerValue = new JsonArray();
					sprinklerValue.add("ON");
					sirenValue = new JsonArray();
					sirenValue.add("OFF");
				}
				
				// time dependency: Do not water between 15:00 and 17:00.
				hourOfTheDay = Integer.parseInt(analyzerResultObject.get("time").getAsString().substring(0,2));
				System.out.println("Hour of the day: " + hourOfTheDay);
				if(hourOfTheDay > 15 && hourOfTheDay < 17) {
					sprinklerValue = new JsonArray();
					sprinklerValue.add("OFF");
				}
				
				outsideArea.add("Sprinkler", sprinklerValue);
				outsideArea.add("Siren", sirenValue);
				plannerResult.add("Outside_Area", outsideArea);
				
				
				
				// plan for Play_Area
				JsonObject playArea = new JsonObject();
				JsonArray heaterValue = new JsonArray();
				JsonArray lightValue = new JsonArray();
				
				if(analyzerResultObject.get("personInPlayArea").getAsBoolean()) {
					int thermometerValue = analyzerResultObject.get("Play_Area").getAsJsonObject().get("thermometerValue").getAsInt();
					if (thermometerValue > 296) {
						heaterValue.add(0.0);
					} else {
						heaterValue.add(1.0);
					}
					lightValue.add(1);

				} else {
					heaterValue.add(0.0);
					lightValue.add(0);
				}
				
				playArea.add("Heater", heaterValue);
				playArea.add("DimmerLight", lightValue);
				plannerResult.add("Play_Area", playArea);
				
				

				// plan for Dining_Area
				JsonObject diningArea = new JsonObject();
				heaterValue = new JsonArray();
				lightValue = new JsonArray();
				
				if(analyzerResultObject.get("personInDiningArea").getAsBoolean()) {
					int thermometerValue = analyzerResultObject.get("Dining_Area").getAsJsonObject().get("thermometerValue").getAsInt();
					if (thermometerValue > 298) {
						heaterValue.add(0.0);
					} else {
						heaterValue.add(1.0);
					}
					lightValue.add(1);

				} else {
					heaterValue.add(0.0);
					lightValue.add(0);
				}
				
				diningArea.add("Heater", heaterValue);
				diningArea.add("DimmerLight", lightValue);
				plannerResult.add("Dining_Area", diningArea);
				
				
				
				// plan for Cloakroom
				JsonObject cloakroom = new JsonObject();
				heaterValue = new JsonArray();
				lightValue = new JsonArray();
				
				if(analyzerResultObject.get("personInCloakroom").getAsBoolean()) {
					int thermometerValue = analyzerResultObject.get("Cloakroom").getAsJsonObject().get("thermometerValue").getAsInt();
					if (thermometerValue > 296) {
						heaterValue.add(0.0);
					} else {
						heaterValue.add(1.0);
					}					
					lightValue.add(1);

				} else {
					heaterValue.add(0.0);
					lightValue.add(0);
				}
				
				cloakroom.add("Heater", heaterValue);
				cloakroom.add("DimmerLight", lightValue);
				plannerResult.add("Cloakroom", cloakroom);
				
				
				this.sendData(plannerResult.toString());
				
				return "Planner - Expected Data Type received! The Value is " + data.getData();
			}
			Synchronizer.getInstance().getSemaphore().release();
			return "Planner - Not the expected data type received! It is: " + data.getData().getClass().getSimpleName();
		}
		Synchronizer.getInstance().getSemaphore().release();
		return "Planner - Not a KnowledgeRecord received! It is: " + data.getClass().getSimpleName();
	}
	
	// add further methods if needed
}
