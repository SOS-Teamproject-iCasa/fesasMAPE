package logicElements.analyzer;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.IAnalyzerLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeRecord;
import dependencies.utils.Context;
import logicElements.knowledge.Synchronizer;

/**
 * Description from meta data:
 * 
 * This file has been generated by the FESAS development tool set.
 * 
 * @author FESAS
 *
 */
public class Analyzer extends AbstractLogic implements IAnalyzerLogic {

	public Analyzer() {
		super();
		supportedInformationTypes.add(InformationType.Monitoring_DEFAULT);

		this.informationType = InformationType.Analyzing_DEFAULT;
		type = LogicType.ANALYZER;
		shortName = "Analyzer";
	}
		

	// do not change anything above this line (except of adding import
	// statements)

	// add variables here
		
	DateFormat dateFormatter;
	
	// use Json object for structuring response (which is sent to planner)
	JsonObject analyzerResultJson = new JsonObject();
	
	// evaluate sensors and add to json result 
	private void evaluateSensors(List<HashMap<String, String>> sensors, String zoneName, String propertyName) {
		String time = "";
		int value;
		
		// save values in an extra zone object
		JsonObject object = new JsonObject();
		
		for(HashMap<String, String> sensor : sensors) {
			System.out.println(sensor.get("ATTRIBUTE_NAME"));
			System.out.println(sensor.get("VALUE"));
			
			if (sensor.get("ATTRIBUTE_NAME").equalsIgnoreCase("PresenceSensor")) {
				System.out.println("Presence Sensor Detected");
				if(sensor.get("VALUE").equalsIgnoreCase("true")) {
					System.out.println("Person in " + zoneName);
					analyzerResultJson.addProperty(propertyName, new Boolean(true));
				} else {
					analyzerResultJson.addProperty(propertyName, new Boolean(false));
				} 
			} else if (sensor.get("ATTRIBUTE_NAME").equalsIgnoreCase("WorkTime")) {
				time = dateFormatter.format(new Date(Long.parseLong((String) sensor.get("VALUE"))));
				System.out.println("Time: " + time);
				analyzerResultJson.addProperty("time", time);
			} else if (sensor.get("ATTRIBUTE_NAME").equalsIgnoreCase("Thermometer")) {
				value = Integer.parseInt(sensor.get("VALUE"));
				object.addProperty("thermometerValue", value);
			} else if (sensor.get("ATTRIBUTE_NAME").equalsIgnoreCase("Illuminance")) {
				value = Integer.parseInt(sensor.get("VALUE"));
				object.addProperty("illuminanceValue", value);
			}
			
		}
		analyzerResultJson.add(zoneName, object);
	}

	@Override
	public void initializeLogic(HashMap<String, String> properties) {
		dateFormatter =  new SimpleDateFormat("HH:mm:ss:SSS");
	
	}

	/**
	 * Receives the context data including the information from the managed
	 * recourses and runs the rule Engine to evaluate action should be the next
	 * step.
	 */
	@Override
	public String callLogic(IKnowledgeRecord data) {
		if (data instanceof KnowledgeRecord) {
			if (data.getData() instanceof Context) { //substitute Context with the expected data type if needed
				// data.getData() return the actual data. The other properties
				// of data is metadata (e.g., time stamps).

				Context monitorData = (Context) data.getData();
				
				System.out.println("Timestamp: " + data.getTimeStamp());
				
				// first string: zone; list of sensors (sensor key and value)
				HashMap<String, List<HashMap<String, String>>> zoneMap = monitorData.getAllObjects();
				
				// evaluate sensors for Play_Area
				List<HashMap<String, String>> playAreaSensors = zoneMap.get("Play_Area");
				evaluateSensors(playAreaSensors, "Play_Area", "personInPlayArea");
				
				// evaluate sensors for Outside Area
				List<HashMap<String, String>> outsideAreaSensors = zoneMap.get("Outside_Area");
				evaluateSensors(outsideAreaSensors, "Outside_Area", "personInOutsideArea");

				
				// evaluate sensors for Dining Area
				List<HashMap<String, String>> diningAreaSensors = zoneMap.get("Dining_Area");
				evaluateSensors(diningAreaSensors, "Dining_Area", "personInDiningArea");
				
				
				// evaluate sensors for Dining Area
				List<HashMap<String, String>> cloakroomSensors = zoneMap.get("Cloakroom");
				evaluateSensors(cloakroomSensors, "Cloakroom", "personInCloakroom");

				// forward data to planer
				this.sendData(analyzerResultJson.toString());

				return "Analyzer - Expected Data Type received! The Value is " + data.getData();
			}
			Synchronizer.getInstance().getSemaphore().release();
			return "Analyzer - Not the expected data type received! It is: "
					+ data.getData().getClass().getSimpleName();
		}
		Synchronizer.getInstance().getSemaphore().release();
		return "Analyzer - Not a KnowledgeRecord received! It is: " + data.getClass().getSimpleName();
	}
}


