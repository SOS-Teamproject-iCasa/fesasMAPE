package logicElements.executor;

import java.util.HashMap;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.IExecutorLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeRecord;
import logicElements.knowledge.Synchronizer;

/**
 * Description from meta data: 
 * 
 * This file has been generated by the FESAS development tool set.
 * 
 * @author FESAS 
 *
 */
public class Executor extends AbstractLogic implements IExecutorLogic {
	
	public Executor() {
		super();	
		supportedInformationTypes.add(InformationType.Planning_DEFAULT);
	
		this.informationType = InformationType.Executing_DEFAULT;
		type = LogicType.EXECUTOR;
		shortName = "Executor";
	}

	// do not change anything above this line (except of adding import statements)

	//add variables here
	
	@Override
	public void initializeLogic(HashMap<String, String> properties) {
		//use this method for initializing variables, etc.
		// if there is nothing to do, delete it
	}
	
	@Override
	public String callLogic(IKnowledgeRecord data) {
		if (data instanceof KnowledgeRecord) {
			if (data.getData() instanceof String) { //substitute String with the expected data type if needed
				//data.getData() return the actual data. The other properties of data is metadata (e.g., time stamps).
				
		
				JsonObject executorResult = new JsonObject();
				
				JsonObject outsideArea = new JsonObject();
				JsonArray sprinklerValue = new JsonArray();
				sprinklerValue.add("ON");
				outsideArea.add("Sprinkler", sprinklerValue);
				JsonArray speakerValue = new JsonArray();
				speakerValue.add("ON");
				outsideArea.add("Speaker", speakerValue);
				executorResult.add("Outside_Area", outsideArea);
				
				JsonObject playArea = new JsonObject();
				JsonArray heaterValue = new JsonArray();
				heaterValue.add(1.0);
				playArea.add("Heater", heaterValue);
				JsonArray lightValue = new JsonArray();
				lightValue.add(0.5);
				playArea.add("DimmerLight", lightValue);
				executorResult.add("Play_Area", playArea);
				
				JsonObject diningArea = new JsonObject();
				JsonArray heaterValueDining = new JsonArray();
				heaterValueDining.add(0.8);
				diningArea.add("Heater", heaterValueDining);
				JsonArray lightValueDining = new JsonArray();
				lightValueDining.add(0.2);
				diningArea.add("DimmerLight", lightValueDining);
				executorResult.add("Dining_Area", diningArea);
				
				JsonObject cloakroom = new JsonObject();
				JsonArray heaterValueCloakroom = new JsonArray();
				heaterValueCloakroom.add(0.3);
				cloakroom.add("Heater", heaterValueCloakroom);
				JsonArray lightValueCloakroom = new JsonArray();
				lightValueCloakroom.add(1.0);
				cloakroom.add("DimmerLight", lightValueCloakroom);
				executorResult.add("Cloakroom", cloakroom);
				
				
				this.sendData(executorResult.toString());
//				String executorResult = "{\"Play_Area\": {\"Heater\": [1.0], \"DimmerLight\": [0.5]}, \"Outside_Area\": {\"Sprinkler\": [\"ON\"]}}"; // Example serialized to JSON
				// Available actuators: Heater, Cooler, DimmerLight, Sprinkler, BinaryLightCO, BinaryLightCO2, BinaryLightGardener, SirenCO, SirenCO2, SirenBurglar
//				this.sendData(executorResult);
				
				return "Executor - Expected Data Type received! The Value is " + data.getData();
			}
			Synchronizer.getInstance().getSemaphore().release();
			return "Executor - Not the expected data type received! It is: " + data.getData().getClass().getSimpleName();
		}
		Synchronizer.getInstance().getSemaphore().release();
		return "Executor - Not a KnowledgeRecord received! It is: " + data.getClass().getSimpleName();
	}
	
	// add further methods if needed
}
