package logicElements.effector;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.AbstractLogic;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.LogicType;
import de.mannheim.wifo2.fesas.logicRepositoryStructure.data.metadata.logic.logicInterfaces.IEffectorLogic;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.information.InformationType;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.IKnowledgeRecord;
import de.mannheim.wifo2.fesas.sasStructure.data.adaptationLogic.knowledge.KnowledgeRecord;

/**
 * Description from meta data: iCasaEffector
 * 
 * This file has been generated by the FESAS development tool set.
 * 
 * @author FESAS 
 *
 */
public class ICasaEffector extends AbstractLogic implements IEffectorLogic {
	
	public ICasaEffector() {
		super();	
		supportedInformationTypes.add(InformationType.Executing_DEFAULT);
	
		this.informationType = InformationType.Effector_DEFAULT;
		type = LogicType.EFFECTOR;
		shortName = "ICasaEffector";
	}

	private static final String USER_AGENT = "Mozilla/5.0";
	
	List<EffectorZone> zonesList;

	//to hold information about the IDs of the actuator devices within each zone 
	class EffectorZone {
		public String zoneId;
		public String heater;
		public String cooler;
		public String dimmerLight;
		public String binaryLightCO;
		public String binaryLightCO2;
		public String sirenCO;
		public String sirenCO2;
		public String binaryLightGardener;
		public String sirenBurglar;
		public String sprinkler;
		
		public EffectorZone(String zoneId){
			this.zoneId = zoneId;
		}
		
		public void addDevice(String deviceId){
			String[] parts = deviceId.split("-");
			String deviceType = parts[0];
			switch(deviceType){
				case "Heater":
					this.heater = deviceId;
					break;
				case "Cooler":
					this.cooler = deviceId;
					break;
				case "DimmerLight":
					this.dimmerLight = deviceId;
					break;
				case "Sprinkler":
					this.sprinkler = deviceId;
					break;
				case "BinaryLight":
					if (parts[1].equals("CO")) {
						this.binaryLightCO = deviceId;
					} else if (parts[1].equals("CO2")){
						this.binaryLightCO2 = deviceId;
					} else {
						this.binaryLightGardener = deviceId;
					}							
					break;
				case "Siren": 
					if (parts[1].equals("CO")) {
						this.sirenCO = deviceId;
					} else if (parts[1].equals("CO2")){
						this.sirenCO2 = deviceId;
					} else {
						this.sirenBurglar = deviceId;
					}							
					break;
			}
		}
		
		public String toString (){
			return this.zoneId + ":" 
					+ "\n Heater: " 		+ this.heater
//					+ "\n Cooler: " 		+ this.cooler
					+ "\n DimmerLight: " 	+ this.dimmerLight
					+ "\n Sprinkler: " 		+ this.sprinkler
//					+ "\n BinaryLightCO2: " + this.binaryLightCO2
//					+ "\n BinaryLightCO: "  + this.binaryLightCO
//					+ "\n BinaryLightGardener: " + this.binaryLightGardener
//					+ "\n SirenCO: " 		+ this.sirenCO
//					+ "\n SirenCO2: " 		+ this.sirenCO2
					+ "\n Siren: " 	+ this.sirenBurglar;
		}
	}
	
	@Override
	public void initializeLogic(HashMap<String, String> properties) {
		//use this method for initializing variables, etc.
		JsonParser parser = new JsonParser();
		zonesList = new LinkedList<EffectorZone>();
		
		try {
			
			//create a new EffectorZone for each zone and add it to the zones list
			String zones = this.sendGet("http://localhost:9000/icasa/zones/zones");
			JsonArray zonesJson = (JsonArray) parser.parse(zones);
			for (JsonElement zoneEntry : zonesJson) {
				this.zonesList.add(new EffectorZone(zoneEntry.getAsJsonObject().getAsJsonPrimitive("id").getAsString()));
			}
			
			//add devices to EffectorZones
			String devices = this.sendGet("http://localhost:9000/icasa/devices/devices");
			JsonArray devicesJson = (JsonArray) parser.parse(devices);
			for (JsonElement deviceEntry : devicesJson) {
				String deviceZoneId = deviceEntry.getAsJsonObject().getAsJsonPrimitive("location").getAsString();
				for(EffectorZone effectorZone : zonesList){
					if (effectorZone.zoneId.equals(deviceZoneId)) {
						effectorZone.addDevice(deviceEntry.getAsJsonObject().getAsJsonPrimitive("id").getAsString());
					}
				}
			}
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
			
	}
	
	@Override
	public String callLogic(IKnowledgeRecord data) {
		if (data instanceof KnowledgeRecord) { 
			if (data.getData() instanceof String) { 
				JsonParser parser = new JsonParser();
				JsonObject zonesJson = (JsonObject) parser.parse((String) data.getData());
				System.out.println(zonesJson);
				Set<Entry<String, JsonElement>> entries = zonesJson.entrySet();
				for (Entry<String, JsonElement> entry : entries) {
					//get zone id and list of necessary actions
					String zoneId = (String) entry.getKey();
					EffectorZone currentZone = null;
					for (EffectorZone zone : zonesList){
						if (zone.zoneId.equals(zoneId)) {
							currentZone = zone;
							break;
						}
					}
					
					JsonElement element = (JsonElement) entry.getValue();
					
					//TESTING
					System.out.println("currentZone: " + currentZone.toString());
					System.out.println("Actions:" + element);
				
					Set<Entry<String, JsonElement>> actions = element.getAsJsonObject().entrySet();
					
					//loop over actions for the current zone and execute them via HTTP Requests
					for (Entry<String, JsonElement> action : actions){
						String sensorType = (String) action.getKey();
						System.out.println("SensorType: " + sensorType);
						JsonElement sensorAction = (JsonElement) action.getValue();
						JsonArray array = sensorAction.getAsJsonArray();
						try {
							switch (sensorType){
								case "Siren": 
									if (currentZone.sirenBurglar != null){
										if(array.get(0).getAsString().equals("ON")){
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/siren/" + currentZone.sirenBurglar + "/turnOn");
										} else {
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/siren/" + currentZone.sirenBurglar + "/turnOff");
										}
									}
									break;
								case "SirenCO": 
									if (currentZone.sirenCO != null){
										if(array.get(0).getAsString().equals("ON")){
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/siren/" + currentZone.sirenCO + "/turnOn");
										} else {
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/siren/" + currentZone.sirenCO+ "/turnOff");
										}
									}
									break;
								case "SirenCO2": 
									if (currentZone.sirenCO2 != null){
										if(array.get(0).getAsString().equals("ON")){
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/siren/" + currentZone.sirenCO2 + "/turnOn");
										} else {
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/siren/" + currentZone.sirenCO2 + "/turnOff");
										}
									}
									break;
								case "Cooler":
									if (currentZone.cooler != null){
										this.sendPost("http://localhost:9000/icasa/adaptation/agent/cooler/" + currentZone.cooler + "/state", array.get(0).getAsString()) ;
									}
									break;
								case "Heater":
									if (currentZone.heater != null){
										this.sendPost("http://localhost:9000/icasa/adaptation/agent/heater/" + currentZone.heater + "/state", array.get(0).getAsString()) ;
									}
									break;
								case "Sprinkler":
									if (currentZone.sprinkler != null){
										if(array.get(0).getAsString().equals("ON")){
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/sprinkler/" + currentZone.sprinkler + "/turnOn");
										} else {
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/sprinkler/" + currentZone.sprinkler + "/turnOff");
										}
									}
									break;
								case "BinaryLightGardener":
									if (currentZone.binaryLightGardener != null){
										if(array.get(0).getAsString().equals("ON")){
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/light/" + currentZone.binaryLightGardener + "/turnOn");
										} else {
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/light/" + currentZone.binaryLightGardener+ "/turnOff");
										}
									}
									break; 
								case "BinaryLightCO": 
									if (currentZone.binaryLightCO != null){
										if(array.get(0).getAsString().equals("ON")){
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/light/" + currentZone.binaryLightCO + "/turnOn");
										} else {
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/light/" + currentZone.binaryLightCO + "/turnOff");
										}
									}
									break;
								case "BinaryLightCO2": 
									if (currentZone.binaryLightCO2 != null){
										if(array.get(0).getAsString().equals("ON")){
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/light/" + currentZone.binaryLightCO2 + "/turnOn");
										} else {
											this.sendPut("http://localhost:9000/icasa/adaptation/agent/light/" + currentZone.binaryLightCO2 + "/turnOff");
										}
									}
									break;
								case "DimmerLight": 
									if (currentZone.dimmerLight != null){
										this.sendPost("http://localhost:9000/icasa/adaptation/agent/dimmerlight/" + currentZone.dimmerLight + "/state", array.get(0).getAsString()) ;
									}
									break;
								}
						} catch (Exception e){
							e.printStackTrace();
						}
					}
				}
				return "Effector - Expected Data Type received! The Value is " + data.getData();
			}
			return "Not the expected data type! It is: " + data.getData().getClass().getSimpleName();
		}
		return "Not a KnowledgeRecord! It is: " + data.getClass().getSimpleName();
	}

	/**
	 * Sends a HTTP GET request
	 * @param url Target URL
	 * @return Response
	 * @throws Exception Error occurred during sending
	 */
	private String sendGet(String url) throws Exception {

		URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();
		con.setRequestMethod("GET");

		// add request header
		con.setRequestProperty("User-Agent", USER_AGENT);

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'GET' request to URL : " + url);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();

		return response.toString();
	}
	
	/**
	 * Sends a HTTP PUT request
	 * @param url Target URL
	 * @throws Exception Error occurred during sending
	 */
	private void sendPut(String url) throws Exception {

		URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();
		con.setRequestMethod("PUT");

		// add request header
		con.setRequestProperty("User-Agent", USER_AGENT);

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'PUT' request to URL : " + url);
		System.out.println("Response Code : " + responseCode);

	}
	
	/**
	 * Sends a HTTP POST request
	 * @param url Target URL
	 * @param state State
	 * @throws Exception Error occurred during sending
	 */
	private void sendPost(String url, String state) throws Exception {

		URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();
		con.setRequestMethod("POST");

		// add request header
		con.setRequestProperty("User-Agent", USER_AGENT);

		String urlParameters ="{\"state\":" + state + "}";
		con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.writeBytes(urlParameters);
		wr.flush();
		wr.close();
		
		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Response Code : " + responseCode);
	}
}
